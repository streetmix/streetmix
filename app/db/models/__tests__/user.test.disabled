import { vi } from 'vitest'
import userFactory from '../../factories/user.js'
const { User } = require('../index.js')

// Skipping this suite because pg expects to run in a server environment,
// and our jest setup assumes a jsdom environment.
describe('creates a user', () => {
  let user

  // Before any tests run, clear the DB and run migrations with Sequelize sync()
  // note: we may not need the pretest hooks if we do it this way?
  beforeAll(async () => {
    await User.sequelize.sync({ force: true })
  })

  beforeEach(async () => {
    user = await userFactory()
  })

  it('created user to match', async () => {
    user = await userFactory({ id: 'thefirstuser' })
    expect(user.id).toBe('thefirstuser')
  })

  it('has a default role of USER', async () => {
    expect(user.roles[0]).toBe('USER')
  })

  it('adds admin to roles', async () => {
    // fyi: sequelize dosen't actually pass this to the table until user.save() or update
    // so...this isn't commiting to the database and isn't testing that the role actually exists
    user.addRole('ADMIN')
    expect(user.roles[1]).toBe('ADMIN')
    // we don't let dupe values be added
    user.addRole('ADMIN')
    expect(user.roles[2]).not.toBe('ADMIN')
  })

  it('removes admin from roles', async () => {
    user.removeRole('ADMIN')
    expect(user.roles[1]).not.toBe('ADMIN')
  })

  it('throws an error when role is invalid', async () => {
    // see https://jestjs.io/docs/en/expect#expectassertionsnumber
    expect.assertions(1)
    user.addRole('SPACE')
    // see https://jestjs.io/docs/en/tutorial-async#rejects
    await expect(user.validate()).rejects.toThrow(
      'Validation error: Role does not match list of valid roles'
    )
  })

  it('handles more than one value in the roles array when they all match', async () => {
    // see https://jestjs.io/docs/en/expect#expectassertionsnumber
    expect.assertions(1)
    user.roles = ['ADMIN', 'BETA_TESTER']
    // see https://jestjs.io/docs/en/tutorial-async#rejects
    await expect(user.validate()).resolves.not.toThrow(
      'Validation error: Role does not match list of valid roles'
    )
  })

  it('throws an error when some roles are valid but at least one is not', async () => {
    // see https://jestjs.io/docs/en/expect#expectassertionsnumber
    expect.assertions(1)
    // 'ALPHA_TESTER' does not match
    user.roles = ['ADMIN', 'BETA_TESTER', 'ALPHA_TESTER']
    // see https://jestjs.io/docs/en/tutorial-async#rejects
    await expect(user.validate()).rejects.toThrow(
      'Validation error: Role does not match list of valid roles'
    )
  })

  it('validates auth0Id as a non-empty string', async () => {
    user.auth0Id = ''
    await expect(user.validate()).rejects.toThrow(
      'Validation error: Validation notEmpty on auth0Id failed'
    )
  })

  it('validates displayName as a string with a maximum length of 30 characters', async () => {
    user.displayName = 'a'.repeat(31)
    await expect(user.validate()).rejects.toThrow(
      'Validation error: Validation len on displayName failed'
    )
  })

  it('validates email as a valid email address', async () => {
    user.email = 'invalid-email'
    await expect(user.validate()).rejects.toThrow(
      'Validation error: Validation isEmail on email failed'
    )
  })

  it('validates profileImageUrl as a valid URL with a maximum length of 2048 characters', async () => {
    user.profileImageUrl = 'invalid-url'
    await expect(user.validate()).rejects.toThrow(
      'Validation error: Validation isUrl on profileImageUrl failed'
    )
  })

  it('validates identities as a JSON object', async () => {
    user.identities = 'invalid-json'
    await expect(user.validate()).rejects.toThrow(
      'Validation error: Validation isJSON on identities failed'
    )
  })

  it('validates flags as a JSON object', async () => {
    user.flags = 'invalid-json'
    await expect(user.validate()).rejects.toThrow(
      'Validation error: Validation isJSON on flags failed'
    )
  })

  it('validates data as a JSON object', async () => {
    user.data = 'invalid-json'
    await expect(user.validate()).rejects.toThrow(
      'Validation error: Validation isJSON on data failed'
    )
  })

  // After all tests have finished, close the DB connection
  afterAll(async () => {
    await User.sequelize.close()
  })
})
