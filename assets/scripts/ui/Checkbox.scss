@import "../../styles/variables";

// UI color ramp
$color-1: $colour-midnight-300 !default;
$color-2: $colour-turquoise-500 !default;

// Special colors
$disabled-color: $colour-midnight-300 !default;

// Colors for stylized checkbox input
$input-default-border-color: $color-1;
$input-unchecked-background-color: transparent;
$input-checked-border-color: $color-1;
$input-checked-background-color: white;
$input-hover-border-color: $color-2;
$input-active-border-color: $color-2;
$input-active-background-color: $color-2;
$input-disabled-border-color: $disabled-color;

// Colors for checkmark icon
$checkmark-checked-color: $color-2;
$checkmark-active-color: white;
$checkmark-disabled-color: $disabled-color;

// Colors for label
$label-disabled-text-color: $disabled-color;
$label-outline-color: $color-2;

.checkbox-item {
  position: relative;

  /* Fits DOM element to content, so check mark is aligned to box
     if content is not aligned left */
  display: inline-block;

  /* Vertical alignment of checkbox and label text */
  line-height: 1.5em;

  /* Hides the original input element from view, but not from DOM */
  input {
    position: absolute;

    /* A standard CSS approach for "accessible" visually-hidden elements,
       such as absolutely positioning elements off the page, can still cause
       inputs to be hidden from certain screen readers. This approach hides
       the input visually, but still makes it accessible. For more info:
       https://scottaohara.github.io/a11y_styled_form_controls/src/checkbox/

       Furthermore, absolute positioning with `left` can cause issues when
       the document is in rtl text direction on Chrome. See also
       https://github.com/streetmix/streetmix/issues/1424 */
    opacity: 0.00001; // stylelint-disable-line number-max-precision
    appearance: none;
    z-index: 2;
  }

  /* Positions the label */
  label {
    display: inline-block;
    position: relative;
    margin-left: 1.3em;
    padding: 0 2px; /* Breathing room around outline property */
    cursor: pointer;
  }

  /* Creates a stylized checkbox for visual display only */
  label::before {
    content: "";
    display: block;
    position: absolute;
    left: -1.2em;
    top: 0.25em;
    height: 1em;
    width: 1em;
    background-color: $input-unchecked-background-color;
    border-radius: $border-radius-small;
    border: 1px solid $input-default-border-color;
    color: inherit;
    transition:
      background-color 60ms,
      color 60ms;
  }

  /* Stylized checkbox, when checked */
  input:checked ~ label::before {
    background-color: $input-checked-background-color;
    border-color: $input-checked-border-color;
  }

  /* Stylized checkbox, when active (during click) */
  input:active:not(:disabled) ~ label::before {
    background-color: $input-active-border-color;
    border-color: $input-active-border-color;
  }

  /* Stylized checkbox, when focused or hovered */
  input:focus:not(:disabled) ~ label::before,
  input:hover:not(:disabled) ~ label::before {
    border: 1px solid $input-hover-border-color;
  }

  /* Stylized checkbox, when checked, and focused or hovered */
  input:focus:checked:not(:disabled) + label::before,
  input:hover:checked:not(:disabled) + label::before {
    border-color: $input-active-border-color;
  }

  /* Stylized checkbox, when disabled */
  input:disabled + label::before {
    border-color: $input-disabled-border-color;
  }

  /* Checkmark */
  input ~ svg {
    position: absolute;
    left: 0.1em;
    top: 0.25em;
    opacity: 0;
    color: transparent;
    pointer-events: none;

    /* Use scale to affect the size because FontAwesome applies its own
       width and height CSS values that interfere with overrides */
    transform: scale(0.75);
  }

  /* Checkmark, when checked */
  input:checked ~ svg {
    color: $checkmark-checked-color;
    opacity: 1;
  }

  /* Checkmark, when active (during click) */
  input:active ~ svg {
    color: $checkmark-active-color;
  }

  /* Checkmark, when input disabled */
  input:checked:disabled ~ svg {
    color: $checkmark-disabled-color;
  }

  /* Label, when input is focused */
  input:focus ~ label {
    outline: 1px dotted $label-outline-color;
  }

  /* Label, when input is disabled */
  input:disabled ~ label {
    color: $label-disabled-text-color;
    cursor: default;
  }
}
